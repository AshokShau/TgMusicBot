name: Batch Dependency Updates

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  BRANCH_NAME: deps/update-${{ github.run_id }}

jobs:
  batch-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Git user
      run: |
        git config --global user.name "AshokShau"
        git config --global user.email "114943948+AshokShau@users.noreply.github.com"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv jq tomli tomli-w packaging
        uv venv .venv
        source .venv/bin/activate
        uv pip install tomli tomli-w packaging

    - name: Get package versions
      id: get-versions
      run: |
        source .venv/bin/activate
        uv pip install -e .
        
        # Get all installed packages
        ALL_PKGS=$(uv pip list --format=json)
        OUTDATED=$(uv pip list --outdated --format=json)
        VERSION_MAP=$(jq -n --argjson all "$ALL_PKGS" --argjson outdated "$OUTDATED" '
          ($all | map({(.name): {version: .version}})) +
          ($outdated | map({(.name): {latest_version: .latest_version}}))
          | add
          | with_entries(.value |= (.version // .latest_version // ""))
        ')
        
        ENCODED_VERSIONS=$(echo "$VERSION_MAP" | base64 -w0)
        echo "versions_b64=${ENCODED_VERSIONS}" >> $GITHUB_OUTPUT
        
        COUNT=$(echo "$OUTDATED" | jq -r 'length')
        echo "count=${COUNT}" >> $GITHUB_OUTPUT
        
        PKG_MD=$(echo "$OUTDATED" | jq -r '.[] | "| \(.name) | \(.version) | \(.latest_version) |"')
        echo "pkg_list_markdown<<EOF" >> $GITHUB_OUTPUT
        echo "$PKG_MD" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update pyproject.toml
      run: |
        source .venv/bin/activate
        python <<EOF
        import json, base64
        import tomli, tomli_w
        from packaging.requirements import Requirement

        version_map = json.loads(base64.b64decode("${{ steps.get-versions.outputs.versions_b64 }}"))
        
        with open("pyproject.toml", "rb") as f:
            pyproject = tomli.load(f)

        state = {"updated": False}

        def process_deps(deps):
            # nonlocal state
            for i, dep in enumerate(deps):
                try:
                    req = Requirement(dep)
                    spec = next(iter(req.specifier), None)
                    op = spec.operator if spec else None
                    
                    pkg_name = req.name.lower()
                    if pkg_name in version_map and version_map[pkg_name]:
                        latest_version = version_map[pkg_name]
                        # Preserve the original operator if it exists, otherwise use ~=
                        new_op = op if op else "~="
                        deps[i] = f"{req.name}{new_op}{latest_version}"
                        print(f"Updated {req.name} to {latest_version}")
                        state["updated"] = True

                except Exception as e:
                    print(f"Skipping invalid requirement {dep}: {e}")

        process_deps(pyproject["project"]["dependencies"])

        if "optional-dependencies" in pyproject["project"]:
            for group in pyproject["project"]["optional-dependencies"].values():
                process_deps(group)

        if state["updated"]:
            with open("pyproject.toml", "wb") as f:
                tomli_w.dump(pyproject, f)
            print("Updated pyproject.toml")
        else:
            print("No version constraints needed updating")
        EOF

    - name: Sync lockfile
      run: |
        source .venv/bin/activate
        uv sync --upgrade
        echo "Lockfile updated via uv sync"

    - name: Commit and push changes
      run: |
        git checkout -b "${BRANCH_NAME}"
        git add pyproject.toml uv.lock
        git commit -m "chore(deps): update ${{ steps.get-versions.outputs.count }} packages" -m $'### ðŸ”„ Batch Dependency Updates\n\nThe following packages were updated:\n\n| Package | Old Version | New Version |\n|---------|-------------|-------------|\n${{ steps.get-versions.outputs.pkg_list_markdown }}\n\n**Update Process:**\n- Updated version constraints in pyproject.toml\n- Synced lockfile with `uv sync --upgrade`'
        git push origin "${BRANCH_NAME}"
